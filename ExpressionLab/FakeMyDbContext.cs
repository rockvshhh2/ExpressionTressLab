// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace ExpressionLab
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<Account> Accounts { get; set; }
        public System.Data.Entity.DbSet<Announcement> Announcements { get; set; }
        public System.Data.Entity.DbSet<AnnouncementAndDeptMapping> AnnouncementAndDeptMappings { get; set; }
        public System.Data.Entity.DbSet<AnnouncementAttach> AnnouncementAttaches { get; set; }
        public System.Data.Entity.DbSet<AnnouncementCategory> AnnouncementCategories { get; set; }
        public System.Data.Entity.DbSet<AnnouncementLog> AnnouncementLogs { get; set; }
        public System.Data.Entity.DbSet<ApplicationErrorLog> ApplicationErrorLogs { get; set; }
        public System.Data.Entity.DbSet<Brand> Brands { get; set; }
        public System.Data.Entity.DbSet<BrandAndDeptMapping> BrandAndDeptMappings { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Language> Languages { get; set; }
        public System.Data.Entity.DbSet<LanguageInfo> LanguageInfoes { get; set; }
        public System.Data.Entity.DbSet<RaiseErrorMessage> RaiseErrorMessages { get; set; }
        public System.Data.Entity.DbSet<Role> Roles { get; set; }
        public System.Data.Entity.DbSet<RoleAndAccountMapping> RoleAndAccountMappings { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }

        public FakeMyDbContext()
        {
            Accounts = new FakeDbSet<Account>("Id");
            Announcements = new FakeDbSet<Announcement>("Id");
            AnnouncementAndDeptMappings = new FakeDbSet<AnnouncementAndDeptMapping>("Id");
            AnnouncementAttaches = new FakeDbSet<AnnouncementAttach>("Id");
            AnnouncementCategories = new FakeDbSet<AnnouncementCategory>("Id");
            AnnouncementLogs = new FakeDbSet<AnnouncementLog>("Id");
            ApplicationErrorLogs = new FakeDbSet<ApplicationErrorLog>("Id");
            Brands = new FakeDbSet<Brand>("BrandId");
            BrandAndDeptMappings = new FakeDbSet<BrandAndDeptMapping>("Id");
            Departments = new FakeDbSet<Department>("DeptId");
            Languages = new FakeDbSet<Language>("PkLanguage");
            LanguageInfoes = new FakeDbSet<LanguageInfo>("PkLanguageInfo");
            RaiseErrorMessages = new FakeDbSet<RaiseErrorMessage>("ErrorId");
            Roles = new FakeDbSet<Role>("RoleId");
            RoleAndAccountMappings = new FakeDbSet<RoleAndAccountMapping>("Id");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        // Stored Procedures
        public int UspCleanDatabase()
        {
 
            return 0;
        }

        public int UspDeleteBrand(int? brandId, string modifierId)
        {
 
            return 0;
        }

        public int UspDeleteBrandAndDeptMapping(int? id, string modifierId)
        {
 
            return 0;
        }

        public int UspDeleteRoleAccountMapping(int? id, string modifyId)
        {
 
            return 0;
        }

        public System.Collections.Generic.List<UspGetAccountInfoByAccountReturnModel> UspGetAccountInfoByAccount(string account)
        {
            int procResult;
            return UspGetAccountInfoByAccount(account, out procResult);
        }

        public System.Collections.Generic.List<UspGetAccountInfoByAccountReturnModel> UspGetAccountInfoByAccount(string account, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAccountInfoByAccountReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAccountInfoByAccountReturnModel>> UspGetAccountInfoByAccountAsync(string account)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAccountInfoByAccount(account, out procResult));
        }

        public System.Collections.Generic.List<UspGetAllAccountReturnModel> UspGetAllAccount()
        {
            int procResult;
            return UspGetAllAccount(out procResult);
        }

        public System.Collections.Generic.List<UspGetAllAccountReturnModel> UspGetAllAccount(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAllAccountReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAllAccountReturnModel>> UspGetAllAccountAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAllAccount(out procResult));
        }

        public System.Collections.Generic.List<UspGetAllDepartmentReturnModel> UspGetAllDepartment()
        {
            int procResult;
            return UspGetAllDepartment(out procResult);
        }

        public System.Collections.Generic.List<UspGetAllDepartmentReturnModel> UspGetAllDepartment(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAllDepartmentReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAllDepartmentReturnModel>> UspGetAllDepartmentAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAllDepartment(out procResult));
        }

        public System.Collections.Generic.List<UspGetAnnouncementAttachByIdReturnModel> UspGetAnnouncementAttachById(int? id)
        {
            int procResult;
            return UspGetAnnouncementAttachById(id, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementAttachByIdReturnModel> UspGetAnnouncementAttachById(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAnnouncementAttachByIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementAttachByIdReturnModel>> UspGetAnnouncementAttachByIdAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAnnouncementAttachById(id, out procResult));
        }

        public System.Collections.Generic.List<UspGetAnnouncementAttachsByAnnouncementIdReturnModel> UspGetAnnouncementAttachsByAnnouncementId(int? announcementId, byte? attachType)
        {
            int procResult;
            return UspGetAnnouncementAttachsByAnnouncementId(announcementId, attachType, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementAttachsByAnnouncementIdReturnModel> UspGetAnnouncementAttachsByAnnouncementId(int? announcementId, byte? attachType, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAnnouncementAttachsByAnnouncementIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementAttachsByAnnouncementIdReturnModel>> UspGetAnnouncementAttachsByAnnouncementIdAsync(int? announcementId, byte? attachType)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAnnouncementAttachsByAnnouncementId(announcementId, attachType, out procResult));
        }

        public System.Collections.Generic.List<UspGetAnnouncementByIdReturnModel> UspGetAnnouncementById(int? announcementId)
        {
            int procResult;
            return UspGetAnnouncementById(announcementId, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementByIdReturnModel> UspGetAnnouncementById(int? announcementId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAnnouncementByIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementByIdReturnModel>> UspGetAnnouncementByIdAsync(int? announcementId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAnnouncementById(announcementId, out procResult));
        }

        public System.Collections.Generic.List<UspGetAnnouncementCategoryByIdReturnModel> UspGetAnnouncementCategoryById(int? id)
        {
            int procResult;
            return UspGetAnnouncementCategoryById(id, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementCategoryByIdReturnModel> UspGetAnnouncementCategoryById(int? id, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAnnouncementCategoryByIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementCategoryByIdReturnModel>> UspGetAnnouncementCategoryByIdAsync(int? id)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAnnouncementCategoryById(id, out procResult));
        }

        public System.Collections.Generic.List<UspGetAnnouncementCategorysReturnModel> UspGetAnnouncementCategorys(bool? vaild, string account, System.DateTime? sysLocalDate)
        {
            int procResult;
            return UspGetAnnouncementCategorys(vaild, account, sysLocalDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementCategorysReturnModel> UspGetAnnouncementCategorys(bool? vaild, string account, System.DateTime? sysLocalDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAnnouncementCategorysReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementCategorysReturnModel>> UspGetAnnouncementCategorysAsync(bool? vaild, string account, System.DateTime? sysLocalDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAnnouncementCategorys(vaild, account, sysLocalDate, out procResult));
        }

        public System.Collections.Generic.List<UspGetAnnouncementDeptMappingReturnModel> UspGetAnnouncementDeptMapping(int? announcementId)
        {
            int procResult;
            return UspGetAnnouncementDeptMapping(announcementId, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementDeptMappingReturnModel> UspGetAnnouncementDeptMapping(int? announcementId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAnnouncementDeptMappingReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementDeptMappingReturnModel>> UspGetAnnouncementDeptMappingAsync(int? announcementId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAnnouncementDeptMapping(announcementId, out procResult));
        }

        public System.Collections.Generic.List<UspGetAnnouncementFrontPagingByCondReturnModel> UspGetAnnouncementFrontPagingByCond(int? currentPage, int? pageSize, string keyword, int? categoryId, System.DateTime? sysLocalDate, string account, int? deptId, int? sortType)
        {
            int procResult;
            return UspGetAnnouncementFrontPagingByCond(currentPage, pageSize, keyword, categoryId, sysLocalDate, account, deptId, sortType, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementFrontPagingByCondReturnModel> UspGetAnnouncementFrontPagingByCond(int? currentPage, int? pageSize, string keyword, int? categoryId, System.DateTime? sysLocalDate, string account, int? deptId, int? sortType, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAnnouncementFrontPagingByCondReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementFrontPagingByCondReturnModel>> UspGetAnnouncementFrontPagingByCondAsync(int? currentPage, int? pageSize, string keyword, int? categoryId, System.DateTime? sysLocalDate, string account, int? deptId, int? sortType)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAnnouncementFrontPagingByCond(currentPage, pageSize, keyword, categoryId, sysLocalDate, account, deptId, sortType, out procResult));
        }

        public System.Collections.Generic.List<UspGetAnnouncementPagingByCondReturnModel> UspGetAnnouncementPagingByCond(int? currentPage, int? pageSize, string title, string creatorName, int? categoryId, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate)
        {
            int procResult;
            return UspGetAnnouncementPagingByCond(currentPage, pageSize, title, creatorName, categoryId, effectiveStartdate, effectiveEnddate, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementPagingByCondReturnModel> UspGetAnnouncementPagingByCond(int? currentPage, int? pageSize, string title, string creatorName, int? categoryId, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetAnnouncementPagingByCondReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementPagingByCondReturnModel>> UspGetAnnouncementPagingByCondAsync(int? currentPage, int? pageSize, string title, string creatorName, int? categoryId, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetAnnouncementPagingByCond(currentPage, pageSize, title, creatorName, categoryId, effectiveStartdate, effectiveEnddate, out procResult));
        }

        public System.Collections.Generic.List<UspGetBrandByIdReturnModel> UspGetBrandById(int? brandId)
        {
            int procResult;
            return UspGetBrandById(brandId, out procResult);
        }

        public System.Collections.Generic.List<UspGetBrandByIdReturnModel> UspGetBrandById(int? brandId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetBrandByIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBrandByIdReturnModel>> UspGetBrandByIdAsync(int? brandId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetBrandById(brandId, out procResult));
        }

        public System.Collections.Generic.List<UspGetBrandsPagingReturnModel> UspGetBrandsPaging(int? currentPage, int? pageSize)
        {
            int procResult;
            return UspGetBrandsPaging(currentPage, pageSize, out procResult);
        }

        public System.Collections.Generic.List<UspGetBrandsPagingReturnModel> UspGetBrandsPaging(int? currentPage, int? pageSize, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetBrandsPagingReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBrandsPagingReturnModel>> UspGetBrandsPagingAsync(int? currentPage, int? pageSize)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetBrandsPaging(currentPage, pageSize, out procResult));
        }

        public int UspGetChangeLanguage()
        {
 
            return 0;
        }

        public System.Collections.Generic.List<UspGetDeptsByBrandReturnModel> UspGetDeptsByBrand(int? brandId)
        {
            int procResult;
            return UspGetDeptsByBrand(brandId, out procResult);
        }

        public System.Collections.Generic.List<UspGetDeptsByBrandReturnModel> UspGetDeptsByBrand(int? brandId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetDeptsByBrandReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetDeptsByBrandReturnModel>> UspGetDeptsByBrandAsync(int? brandId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetDeptsByBrand(brandId, out procResult));
        }

        public System.Collections.Generic.List<UspGetFontCategoryReturnModel> UspGetFontCategory(string account, System.DateTime? sysLocalDate)
        {
            int procResult;
            return UspGetFontCategory(account, sysLocalDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetFontCategoryReturnModel> UspGetFontCategory(string account, System.DateTime? sysLocalDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetFontCategoryReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetFontCategoryReturnModel>> UspGetFontCategoryAsync(string account, System.DateTime? sysLocalDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetFontCategory(account, sysLocalDate, out procResult));
        }

        public System.Collections.Generic.List<UspGetHistoryAnnouncementFrontPagingByCondReturnModel> UspGetHistoryAnnouncementFrontPagingByCond(int? currentPage, int? pageSize, string keyword, int? categoryId, int? year, int? month, System.DateTime? sysLocalDate, string account, int? sortType)
        {
            int procResult;
            return UspGetHistoryAnnouncementFrontPagingByCond(currentPage, pageSize, keyword, categoryId, year, month, sysLocalDate, account, sortType, out procResult);
        }

        public System.Collections.Generic.List<UspGetHistoryAnnouncementFrontPagingByCondReturnModel> UspGetHistoryAnnouncementFrontPagingByCond(int? currentPage, int? pageSize, string keyword, int? categoryId, int? year, int? month, System.DateTime? sysLocalDate, string account, int? sortType, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetHistoryAnnouncementFrontPagingByCondReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetHistoryAnnouncementFrontPagingByCondReturnModel>> UspGetHistoryAnnouncementFrontPagingByCondAsync(int? currentPage, int? pageSize, string keyword, int? categoryId, int? year, int? month, System.DateTime? sysLocalDate, string account, int? sortType)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetHistoryAnnouncementFrontPagingByCond(currentPage, pageSize, keyword, categoryId, year, month, sysLocalDate, account, sortType, out procResult));
        }

        public int UspGetLanguageInfoByLanguageKey(string languageKey)
        {
 
            return 0;
        }

        public System.Collections.Generic.List<UspGetLanguagesReturnModel> UspGetLanguages()
        {
            int procResult;
            return UspGetLanguages(out procResult);
        }

        public System.Collections.Generic.List<UspGetLanguagesReturnModel> UspGetLanguages(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetLanguagesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetLanguagesReturnModel>> UspGetLanguagesAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetLanguages(out procResult));
        }

        public System.Collections.Generic.List<UspGetRoleAndAccountMappingByRoleIdReturnModel> UspGetRoleAndAccountMappingByRoleId(int? roleId)
        {
            int procResult;
            return UspGetRoleAndAccountMappingByRoleId(roleId, out procResult);
        }

        public System.Collections.Generic.List<UspGetRoleAndAccountMappingByRoleIdReturnModel> UspGetRoleAndAccountMappingByRoleId(int? roleId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetRoleAndAccountMappingByRoleIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetRoleAndAccountMappingByRoleIdReturnModel>> UspGetRoleAndAccountMappingByRoleIdAsync(int? roleId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetRoleAndAccountMappingByRoleId(roleId, out procResult));
        }

        public int UspInsertAnnouncement(int? categoryId, string title, string contentSummary, string contentDesc, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate, string backgroundImagePath, bool? valid, string creatorId, System.DateTime? createdAt, string creatorName, int? creatorDept, System.Data.DataTable attachs, System.Data.DataTable depts)
        {
 
            return 0;
        }

        public int UspInsertAnnouncementCategory(string categoryName, int? sort, bool? valid, string creatorId, System.DateTime? createdAt)
        {
 
            return 0;
        }

        public int UspInsertAnnouncementLog(int? announcementId, string account)
        {
 
            return 0;
        }

        public int UspInsertApplicationErrorLog(string applicationName, string requestUrl, string requestPath, string message, string stachMessage)
        {
 
            return 0;
        }

        public int UspInsertBrand(string brandName, string creatorId)
        {
 
            return 0;
        }

        public int UspInsertBrandAndDeptMapping(int? brandId, int? deptId, string creatorId)
        {
 
            return 0;
        }

        public int UspInsertRoleAndAccountMapping(int? roleId, string account, string reasons, string creatorId)
        {
 
            return 0;
        }

        public int UspRaiseError()
        {
 
            return 0;
        }

        public int UspSyncAccount(string modifierId, System.Data.DataTable account)
        {
 
            return 0;
        }

        public int UspSyncDepartment(string modifierId, System.Data.DataTable dept)
        {
 
            return 0;
        }

        public int UspUpdateAnnouncement(int? id, int? categoryId, string title, string contentSummary, string contentDesc, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate, string backgroundImagePath, string modifierId, System.DateTime? modifiedAt, System.Data.DataTable attachs, System.Data.DataTable depts)
        {
 
            return 0;
        }

        public int UspUpdateAnnouncementAttachValid(int? id, string modifierId, System.DateTime? modifiedAt)
        {
 
            return 0;
        }

        public int UspUpdateAnnouncementCategory(int? id, string categoryName, int? sort, bool? valid, string modifierId, System.DateTime? modifiedAt)
        {
 
            return 0;
        }

        public int UspUpdateAnnouncementCategoryValid(int? id, string modifierId, System.DateTime? modifiedAt)
        {
 
            return 0;
        }

        public int UspUpdateAnnouncementValid(int? id, string modifierId, System.DateTime? modifiedAt)
        {
 
            return 0;
        }

        public int UspUpdateBrand(int? brandId, string brandName, string modifierId, string requestUrl)
        {
 
            return 0;
        }

        public int UspUpdateLanguageIsNeedUpdate()
        {
 
            return 0;
        }

    }
}
// </auto-generated>
