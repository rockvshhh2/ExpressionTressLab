// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace ExpressionLab
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<Account> Accounts { get; set; } // Account
        public System.Data.Entity.DbSet<Announcement> Announcements { get; set; } // Announcement
        public System.Data.Entity.DbSet<AnnouncementAndDeptMapping> AnnouncementAndDeptMappings { get; set; } // AnnouncementAndDeptMapping
        public System.Data.Entity.DbSet<AnnouncementAttach> AnnouncementAttaches { get; set; } // AnnouncementAttach
        public System.Data.Entity.DbSet<AnnouncementCategory> AnnouncementCategories { get; set; } // AnnouncementCategory
        public System.Data.Entity.DbSet<AnnouncementLog> AnnouncementLogs { get; set; } // AnnouncementLog
        public System.Data.Entity.DbSet<ApplicationErrorLog> ApplicationErrorLogs { get; set; } // ApplicationErrorLog
        public System.Data.Entity.DbSet<Brand> Brands { get; set; } // Brand
        public System.Data.Entity.DbSet<BrandAndDeptMapping> BrandAndDeptMappings { get; set; } // BrandAndDeptMapping
        public System.Data.Entity.DbSet<Department> Departments { get; set; } // Department
        public System.Data.Entity.DbSet<Language> Languages { get; set; } // Language
        public System.Data.Entity.DbSet<LanguageInfo> LanguageInfoes { get; set; } // LanguageInfo
        public System.Data.Entity.DbSet<RaiseErrorMessage> RaiseErrorMessages { get; set; } // RaiseErrorMessage
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        public System.Data.Entity.DbSet<RoleAndAccountMapping> RoleAndAccountMappings { get; set; } // RoleAndAccountMapping
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=ETPEntities")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccountConfiguration());
            modelBuilder.Configurations.Add(new AnnouncementConfiguration());
            modelBuilder.Configurations.Add(new AnnouncementAndDeptMappingConfiguration());
            modelBuilder.Configurations.Add(new AnnouncementAttachConfiguration());
            modelBuilder.Configurations.Add(new AnnouncementCategoryConfiguration());
            modelBuilder.Configurations.Add(new AnnouncementLogConfiguration());
            modelBuilder.Configurations.Add(new ApplicationErrorLogConfiguration());
            modelBuilder.Configurations.Add(new BrandConfiguration());
            modelBuilder.Configurations.Add(new BrandAndDeptMappingConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new LanguageConfiguration());
            modelBuilder.Configurations.Add(new LanguageInfoConfiguration());
            modelBuilder.Configurations.Add(new RaiseErrorMessageConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new RoleAndAccountMappingConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccountConfiguration(schema));
            modelBuilder.Configurations.Add(new AnnouncementConfiguration(schema));
            modelBuilder.Configurations.Add(new AnnouncementAndDeptMappingConfiguration(schema));
            modelBuilder.Configurations.Add(new AnnouncementAttachConfiguration(schema));
            modelBuilder.Configurations.Add(new AnnouncementCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new AnnouncementLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ApplicationErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new BrandConfiguration(schema));
            modelBuilder.Configurations.Add(new BrandAndDeptMappingConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new RaiseErrorMessageConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleAndAccountMappingConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public int UspCleanDatabase()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[usp_CleanDatabase] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspDeleteBrand(int? brandId, string modifierId)
        {
            var brandIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BrandId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = brandId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!brandId.HasValue)
                brandIdParam.Value = System.DBNull.Value;

            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspDeleteBrand] @BrandId, @ModifierId", brandIdParam, modifierIdParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspDeleteBrandAndDeptMapping(int? id, string modifierId)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspDeleteBrandAndDeptMapping] @Id, @ModifierId", idParam, modifierIdParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspDeleteRoleAccountMapping(int? id, string modifyId)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var modifyIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifyId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifyId, Size = 50 };
            if (modifyIdParam.Value == null)
                modifyIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspDeleteRoleAccountMapping] @Id, @ModifyId", idParam, modifyIdParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<UspGetAccountInfoByAccountReturnModel> UspGetAccountInfoByAccount(string account)
        {
            int procResult;
            return UspGetAccountInfoByAccount(account, out procResult);
        }

        public System.Collections.Generic.List<UspGetAccountInfoByAccountReturnModel> UspGetAccountInfoByAccount(string account, out int procResult)
        {
            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAccountInfoByAccountReturnModel>("EXEC @procResult = [dbo].[uspGetAccountInfoByAccount] @Account", accountParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAccountInfoByAccountReturnModel>> UspGetAccountInfoByAccountAsync(string account)
        {
            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetAccountInfoByAccountReturnModel>("EXEC [dbo].[uspGetAccountInfoByAccount] @Account", accountParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAllAccountReturnModel> UspGetAllAccount()
        {
            int procResult;
            return UspGetAllAccount(out procResult);
        }

        public System.Collections.Generic.List<UspGetAllAccountReturnModel> UspGetAllAccount(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAllAccountReturnModel>("EXEC @procResult = [dbo].[uspGetAllAccount] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAllAccountReturnModel>> UspGetAllAccountAsync()
        {
            var procResultData = await Database.SqlQuery<UspGetAllAccountReturnModel>("EXEC [dbo].[uspGetAllAccount] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAllDepartmentReturnModel> UspGetAllDepartment()
        {
            int procResult;
            return UspGetAllDepartment(out procResult);
        }

        public System.Collections.Generic.List<UspGetAllDepartmentReturnModel> UspGetAllDepartment(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAllDepartmentReturnModel>("EXEC @procResult = [dbo].[uspGetAllDepartment] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAllDepartmentReturnModel>> UspGetAllDepartmentAsync()
        {
            var procResultData = await Database.SqlQuery<UspGetAllDepartmentReturnModel>("EXEC [dbo].[uspGetAllDepartment] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAnnouncementAttachByIdReturnModel> UspGetAnnouncementAttachById(int? id)
        {
            int procResult;
            return UspGetAnnouncementAttachById(id, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementAttachByIdReturnModel> UspGetAnnouncementAttachById(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAnnouncementAttachByIdReturnModel>("EXEC @procResult = [dbo].[uspGetAnnouncementAttachById] @Id", idParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementAttachByIdReturnModel>> UspGetAnnouncementAttachByIdAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetAnnouncementAttachByIdReturnModel>("EXEC [dbo].[uspGetAnnouncementAttachById] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAnnouncementAttachsByAnnouncementIdReturnModel> UspGetAnnouncementAttachsByAnnouncementId(int? announcementId, byte? attachType)
        {
            int procResult;
            return UspGetAnnouncementAttachsByAnnouncementId(announcementId, attachType, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementAttachsByAnnouncementIdReturnModel> UspGetAnnouncementAttachsByAnnouncementId(int? announcementId, byte? attachType, out int procResult)
        {
            var announcementIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AnnouncementId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = announcementId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!announcementId.HasValue)
                announcementIdParam.Value = System.DBNull.Value;

            var attachTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttachType", SqlDbType = System.Data.SqlDbType.TinyInt, Direction = System.Data.ParameterDirection.Input, Value = attachType.GetValueOrDefault(), Precision = 3, Scale = 0 };
            if (!attachType.HasValue)
                attachTypeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAnnouncementAttachsByAnnouncementIdReturnModel>("EXEC @procResult = [dbo].[uspGetAnnouncementAttachsByAnnouncementId] @AnnouncementId, @AttachType", announcementIdParam, attachTypeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementAttachsByAnnouncementIdReturnModel>> UspGetAnnouncementAttachsByAnnouncementIdAsync(int? announcementId, byte? attachType)
        {
            var announcementIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AnnouncementId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = announcementId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!announcementId.HasValue)
                announcementIdParam.Value = System.DBNull.Value;

            var attachTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AttachType", SqlDbType = System.Data.SqlDbType.TinyInt, Direction = System.Data.ParameterDirection.Input, Value = attachType.GetValueOrDefault(), Precision = 3, Scale = 0 };
            if (!attachType.HasValue)
                attachTypeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetAnnouncementAttachsByAnnouncementIdReturnModel>("EXEC [dbo].[uspGetAnnouncementAttachsByAnnouncementId] @AnnouncementId, @AttachType", announcementIdParam, attachTypeParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAnnouncementByIdReturnModel> UspGetAnnouncementById(int? announcementId)
        {
            int procResult;
            return UspGetAnnouncementById(announcementId, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementByIdReturnModel> UspGetAnnouncementById(int? announcementId, out int procResult)
        {
            var announcementIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AnnouncementId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = announcementId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!announcementId.HasValue)
                announcementIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAnnouncementByIdReturnModel>("EXEC @procResult = [dbo].[uspGetAnnouncementById] @AnnouncementId", announcementIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementByIdReturnModel>> UspGetAnnouncementByIdAsync(int? announcementId)
        {
            var announcementIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AnnouncementId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = announcementId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!announcementId.HasValue)
                announcementIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetAnnouncementByIdReturnModel>("EXEC [dbo].[uspGetAnnouncementById] @AnnouncementId", announcementIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAnnouncementCategoryByIdReturnModel> UspGetAnnouncementCategoryById(int? id)
        {
            int procResult;
            return UspGetAnnouncementCategoryById(id, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementCategoryByIdReturnModel> UspGetAnnouncementCategoryById(int? id, out int procResult)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAnnouncementCategoryByIdReturnModel>("EXEC @procResult = [dbo].[uspGetAnnouncementCategoryById] @Id", idParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementCategoryByIdReturnModel>> UspGetAnnouncementCategoryByIdAsync(int? id)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetAnnouncementCategoryByIdReturnModel>("EXEC [dbo].[uspGetAnnouncementCategoryById] @Id", idParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAnnouncementCategorysReturnModel> UspGetAnnouncementCategorys(bool? vaild, string account, System.DateTime? sysLocalDate)
        {
            int procResult;
            return UspGetAnnouncementCategorys(vaild, account, sysLocalDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementCategorysReturnModel> UspGetAnnouncementCategorys(bool? vaild, string account, System.DateTime? sysLocalDate, out int procResult)
        {
            var vaildParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Vaild", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = vaild.GetValueOrDefault() };
            if (!vaild.HasValue)
                vaildParam.Value = System.DBNull.Value;

            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var sysLocalDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SysLocalDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = sysLocalDate.GetValueOrDefault() };
            if (!sysLocalDate.HasValue)
                sysLocalDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAnnouncementCategorysReturnModel>("EXEC @procResult = [dbo].[uspGetAnnouncementCategorys] @Vaild, @Account, @SysLocalDate", vaildParam, accountParam, sysLocalDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementCategorysReturnModel>> UspGetAnnouncementCategorysAsync(bool? vaild, string account, System.DateTime? sysLocalDate)
        {
            var vaildParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Vaild", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = vaild.GetValueOrDefault() };
            if (!vaild.HasValue)
                vaildParam.Value = System.DBNull.Value;

            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var sysLocalDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SysLocalDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = sysLocalDate.GetValueOrDefault() };
            if (!sysLocalDate.HasValue)
                sysLocalDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetAnnouncementCategorysReturnModel>("EXEC [dbo].[uspGetAnnouncementCategorys] @Vaild, @Account, @SysLocalDate", vaildParam, accountParam, sysLocalDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAnnouncementDeptMappingReturnModel> UspGetAnnouncementDeptMapping(int? announcementId)
        {
            int procResult;
            return UspGetAnnouncementDeptMapping(announcementId, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementDeptMappingReturnModel> UspGetAnnouncementDeptMapping(int? announcementId, out int procResult)
        {
            var announcementIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AnnouncementId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = announcementId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!announcementId.HasValue)
                announcementIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAnnouncementDeptMappingReturnModel>("EXEC @procResult = [dbo].[uspGetAnnouncementDeptMapping] @AnnouncementId", announcementIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementDeptMappingReturnModel>> UspGetAnnouncementDeptMappingAsync(int? announcementId)
        {
            var announcementIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AnnouncementId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = announcementId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!announcementId.HasValue)
                announcementIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetAnnouncementDeptMappingReturnModel>("EXEC [dbo].[uspGetAnnouncementDeptMapping] @AnnouncementId", announcementIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAnnouncementFrontPagingByCondReturnModel> UspGetAnnouncementFrontPagingByCond(int? currentPage, int? pageSize, string keyword, int? categoryId, System.DateTime? sysLocalDate, string account, int? deptId, int? sortType)
        {
            int procResult;
            return UspGetAnnouncementFrontPagingByCond(currentPage, pageSize, keyword, categoryId, sysLocalDate, account, deptId, sortType, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementFrontPagingByCondReturnModel> UspGetAnnouncementFrontPagingByCond(int? currentPage, int? pageSize, string keyword, int? categoryId, System.DateTime? sysLocalDate, string account, int? deptId, int? sortType, out int procResult)
        {
            var currentPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = currentPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!currentPage.HasValue)
                currentPageParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var keywordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Keyword", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = keyword, Size = 200 };
            if (keywordParam.Value == null)
                keywordParam.Value = System.DBNull.Value;

            var categoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = System.DBNull.Value;

            var sysLocalDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SysLocalDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = sysLocalDate.GetValueOrDefault() };
            if (!sysLocalDate.HasValue)
                sysLocalDateParam.Value = System.DBNull.Value;

            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var deptIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DeptId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = deptId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!deptId.HasValue)
                deptIdParam.Value = System.DBNull.Value;

            var sortTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sortType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sortType.HasValue)
                sortTypeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAnnouncementFrontPagingByCondReturnModel>("EXEC @procResult = [dbo].[uspGetAnnouncementFrontPagingByCond] @CurrentPage, @PageSize, @Keyword, @CategoryId, @SysLocalDate, @Account, @DeptId, @SortType", currentPageParam, pageSizeParam, keywordParam, categoryIdParam, sysLocalDateParam, accountParam, deptIdParam, sortTypeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementFrontPagingByCondReturnModel>> UspGetAnnouncementFrontPagingByCondAsync(int? currentPage, int? pageSize, string keyword, int? categoryId, System.DateTime? sysLocalDate, string account, int? deptId, int? sortType)
        {
            var currentPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = currentPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!currentPage.HasValue)
                currentPageParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var keywordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Keyword", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = keyword, Size = 200 };
            if (keywordParam.Value == null)
                keywordParam.Value = System.DBNull.Value;

            var categoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = System.DBNull.Value;

            var sysLocalDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SysLocalDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = sysLocalDate.GetValueOrDefault() };
            if (!sysLocalDate.HasValue)
                sysLocalDateParam.Value = System.DBNull.Value;

            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var deptIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DeptId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = deptId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!deptId.HasValue)
                deptIdParam.Value = System.DBNull.Value;

            var sortTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sortType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sortType.HasValue)
                sortTypeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetAnnouncementFrontPagingByCondReturnModel>("EXEC [dbo].[uspGetAnnouncementFrontPagingByCond] @CurrentPage, @PageSize, @Keyword, @CategoryId, @SysLocalDate, @Account, @DeptId, @SortType", currentPageParam, pageSizeParam, keywordParam, categoryIdParam, sysLocalDateParam, accountParam, deptIdParam, sortTypeParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetAnnouncementPagingByCondReturnModel> UspGetAnnouncementPagingByCond(int? currentPage, int? pageSize, string title, string creatorName, int? categoryId, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate)
        {
            int procResult;
            return UspGetAnnouncementPagingByCond(currentPage, pageSize, title, creatorName, categoryId, effectiveStartdate, effectiveEnddate, out procResult);
        }

        public System.Collections.Generic.List<UspGetAnnouncementPagingByCondReturnModel> UspGetAnnouncementPagingByCond(int? currentPage, int? pageSize, string title, string creatorName, int? categoryId, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate, out int procResult)
        {
            var currentPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = currentPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!currentPage.HasValue)
                currentPageParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 200 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var creatorNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatorName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = creatorName, Size = 50 };
            if (creatorNameParam.Value == null)
                creatorNameParam.Value = System.DBNull.Value;

            var categoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = System.DBNull.Value;

            var effectiveStartdateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EffectiveStartdate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = effectiveStartdate.GetValueOrDefault() };
            if (!effectiveStartdate.HasValue)
                effectiveStartdateParam.Value = System.DBNull.Value;

            var effectiveEnddateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EffectiveEnddate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = effectiveEnddate.GetValueOrDefault() };
            if (!effectiveEnddate.HasValue)
                effectiveEnddateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetAnnouncementPagingByCondReturnModel>("EXEC @procResult = [dbo].[uspGetAnnouncementPagingByCond] @CurrentPage, @PageSize, @Title, @CreatorName, @CategoryId, @EffectiveStartdate, @EffectiveEnddate", currentPageParam, pageSizeParam, titleParam, creatorNameParam, categoryIdParam, effectiveStartdateParam, effectiveEnddateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetAnnouncementPagingByCondReturnModel>> UspGetAnnouncementPagingByCondAsync(int? currentPage, int? pageSize, string title, string creatorName, int? categoryId, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate)
        {
            var currentPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = currentPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!currentPage.HasValue)
                currentPageParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 200 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var creatorNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatorName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = creatorName, Size = 50 };
            if (creatorNameParam.Value == null)
                creatorNameParam.Value = System.DBNull.Value;

            var categoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = System.DBNull.Value;

            var effectiveStartdateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EffectiveStartdate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = effectiveStartdate.GetValueOrDefault() };
            if (!effectiveStartdate.HasValue)
                effectiveStartdateParam.Value = System.DBNull.Value;

            var effectiveEnddateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EffectiveEnddate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = effectiveEnddate.GetValueOrDefault() };
            if (!effectiveEnddate.HasValue)
                effectiveEnddateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetAnnouncementPagingByCondReturnModel>("EXEC [dbo].[uspGetAnnouncementPagingByCond] @CurrentPage, @PageSize, @Title, @CreatorName, @CategoryId, @EffectiveStartdate, @EffectiveEnddate", currentPageParam, pageSizeParam, titleParam, creatorNameParam, categoryIdParam, effectiveStartdateParam, effectiveEnddateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetBrandByIdReturnModel> UspGetBrandById(int? brandId)
        {
            int procResult;
            return UspGetBrandById(brandId, out procResult);
        }

        public System.Collections.Generic.List<UspGetBrandByIdReturnModel> UspGetBrandById(int? brandId, out int procResult)
        {
            var brandIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BrandId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = brandId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!brandId.HasValue)
                brandIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetBrandByIdReturnModel>("EXEC @procResult = [dbo].[uspGetBrandById] @BrandId", brandIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBrandByIdReturnModel>> UspGetBrandByIdAsync(int? brandId)
        {
            var brandIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BrandId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = brandId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!brandId.HasValue)
                brandIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetBrandByIdReturnModel>("EXEC [dbo].[uspGetBrandById] @BrandId", brandIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetBrandsPagingReturnModel> UspGetBrandsPaging(int? currentPage, int? pageSize)
        {
            int procResult;
            return UspGetBrandsPaging(currentPage, pageSize, out procResult);
        }

        public System.Collections.Generic.List<UspGetBrandsPagingReturnModel> UspGetBrandsPaging(int? currentPage, int? pageSize, out int procResult)
        {
            var currentPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = currentPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!currentPage.HasValue)
                currentPageParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetBrandsPagingReturnModel>("EXEC @procResult = [dbo].[uspGetBrandsPaging] @CurrentPage, @PageSize", currentPageParam, pageSizeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBrandsPagingReturnModel>> UspGetBrandsPagingAsync(int? currentPage, int? pageSize)
        {
            var currentPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = currentPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!currentPage.HasValue)
                currentPageParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetBrandsPagingReturnModel>("EXEC [dbo].[uspGetBrandsPaging] @CurrentPage, @PageSize", currentPageParam, pageSizeParam).ToListAsync();

            return procResultData;
        }

        public int UspGetChangeLanguage()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspGetChangeLanguage] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<UspGetDeptsByBrandReturnModel> UspGetDeptsByBrand(int? brandId)
        {
            int procResult;
            return UspGetDeptsByBrand(brandId, out procResult);
        }

        public System.Collections.Generic.List<UspGetDeptsByBrandReturnModel> UspGetDeptsByBrand(int? brandId, out int procResult)
        {
            var brandIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BrandId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = brandId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!brandId.HasValue)
                brandIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetDeptsByBrandReturnModel>("EXEC @procResult = [dbo].[uspGetDeptsByBrand] @BrandId", brandIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetDeptsByBrandReturnModel>> UspGetDeptsByBrandAsync(int? brandId)
        {
            var brandIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BrandId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = brandId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!brandId.HasValue)
                brandIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetDeptsByBrandReturnModel>("EXEC [dbo].[uspGetDeptsByBrand] @BrandId", brandIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetFontCategoryReturnModel> UspGetFontCategory(string account, System.DateTime? sysLocalDate)
        {
            int procResult;
            return UspGetFontCategory(account, sysLocalDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetFontCategoryReturnModel> UspGetFontCategory(string account, System.DateTime? sysLocalDate, out int procResult)
        {
            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var sysLocalDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SysLocalDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = sysLocalDate.GetValueOrDefault() };
            if (!sysLocalDate.HasValue)
                sysLocalDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetFontCategoryReturnModel>("EXEC @procResult = [dbo].[uspGetFontCategory] @Account, @SysLocalDate", accountParam, sysLocalDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetFontCategoryReturnModel>> UspGetFontCategoryAsync(string account, System.DateTime? sysLocalDate)
        {
            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var sysLocalDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SysLocalDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = sysLocalDate.GetValueOrDefault() };
            if (!sysLocalDate.HasValue)
                sysLocalDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetFontCategoryReturnModel>("EXEC [dbo].[uspGetFontCategory] @Account, @SysLocalDate", accountParam, sysLocalDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetHistoryAnnouncementFrontPagingByCondReturnModel> UspGetHistoryAnnouncementFrontPagingByCond(int? currentPage, int? pageSize, string keyword, int? categoryId, int? year, int? month, System.DateTime? sysLocalDate, string account, int? sortType)
        {
            int procResult;
            return UspGetHistoryAnnouncementFrontPagingByCond(currentPage, pageSize, keyword, categoryId, year, month, sysLocalDate, account, sortType, out procResult);
        }

        public System.Collections.Generic.List<UspGetHistoryAnnouncementFrontPagingByCondReturnModel> UspGetHistoryAnnouncementFrontPagingByCond(int? currentPage, int? pageSize, string keyword, int? categoryId, int? year, int? month, System.DateTime? sysLocalDate, string account, int? sortType, out int procResult)
        {
            var currentPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = currentPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!currentPage.HasValue)
                currentPageParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var keywordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Keyword", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = keyword, Size = 200 };
            if (keywordParam.Value == null)
                keywordParam.Value = System.DBNull.Value;

            var categoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = System.DBNull.Value;

            var yearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Year", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = System.DBNull.Value;

            var monthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Month", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = month.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!month.HasValue)
                monthParam.Value = System.DBNull.Value;

            var sysLocalDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SysLocalDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = sysLocalDate.GetValueOrDefault() };
            if (!sysLocalDate.HasValue)
                sysLocalDateParam.Value = System.DBNull.Value;

            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var sortTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sortType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sortType.HasValue)
                sortTypeParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetHistoryAnnouncementFrontPagingByCondReturnModel>("EXEC @procResult = [dbo].[uspGetHistoryAnnouncementFrontPagingByCond] @CurrentPage, @PageSize, @Keyword, @CategoryId, @Year, @Month, @SysLocalDate, @Account, @SortType", currentPageParam, pageSizeParam, keywordParam, categoryIdParam, yearParam, monthParam, sysLocalDateParam, accountParam, sortTypeParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetHistoryAnnouncementFrontPagingByCondReturnModel>> UspGetHistoryAnnouncementFrontPagingByCondAsync(int? currentPage, int? pageSize, string keyword, int? categoryId, int? year, int? month, System.DateTime? sysLocalDate, string account, int? sortType)
        {
            var currentPageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentPage", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = currentPage.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!currentPage.HasValue)
                currentPageParam.Value = System.DBNull.Value;

            var pageSizeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PageSize", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = pageSize.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!pageSize.HasValue)
                pageSizeParam.Value = System.DBNull.Value;

            var keywordParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Keyword", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = keyword, Size = 200 };
            if (keywordParam.Value == null)
                keywordParam.Value = System.DBNull.Value;

            var categoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = System.DBNull.Value;

            var yearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Year", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = System.DBNull.Value;

            var monthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Month", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = month.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!month.HasValue)
                monthParam.Value = System.DBNull.Value;

            var sysLocalDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SysLocalDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = sysLocalDate.GetValueOrDefault() };
            if (!sysLocalDate.HasValue)
                sysLocalDateParam.Value = System.DBNull.Value;

            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var sortTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SortType", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sortType.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sortType.HasValue)
                sortTypeParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetHistoryAnnouncementFrontPagingByCondReturnModel>("EXEC [dbo].[uspGetHistoryAnnouncementFrontPagingByCond] @CurrentPage, @PageSize, @Keyword, @CategoryId, @Year, @Month, @SysLocalDate, @Account, @SortType", currentPageParam, pageSizeParam, keywordParam, categoryIdParam, yearParam, monthParam, sysLocalDateParam, accountParam, sortTypeParam).ToListAsync();

            return procResultData;
        }

        public int UspGetLanguageInfoByLanguageKey(string languageKey)
        {
            var languageKeyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LanguageKey", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = languageKey, Size = 10 };
            if (languageKeyParam.Value == null)
                languageKeyParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspGetLanguageInfoByLanguageKey] @LanguageKey", languageKeyParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<UspGetLanguagesReturnModel> UspGetLanguages()
        {
            int procResult;
            return UspGetLanguages(out procResult);
        }

        public System.Collections.Generic.List<UspGetLanguagesReturnModel> UspGetLanguages(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetLanguagesReturnModel>("EXEC @procResult = [dbo].[uspGetLanguages] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetLanguagesReturnModel>> UspGetLanguagesAsync()
        {
            var procResultData = await Database.SqlQuery<UspGetLanguagesReturnModel>("EXEC [dbo].[uspGetLanguages] ").ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetRoleAndAccountMappingByRoleIdReturnModel> UspGetRoleAndAccountMappingByRoleId(int? roleId)
        {
            int procResult;
            return UspGetRoleAndAccountMappingByRoleId(roleId, out procResult);
        }

        public System.Collections.Generic.List<UspGetRoleAndAccountMappingByRoleIdReturnModel> UspGetRoleAndAccountMappingByRoleId(int? roleId, out int procResult)
        {
            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetRoleAndAccountMappingByRoleIdReturnModel>("EXEC @procResult = [dbo].[uspGetRoleAndAccountMappingByRoleId] @RoleId", roleIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetRoleAndAccountMappingByRoleIdReturnModel>> UspGetRoleAndAccountMappingByRoleIdAsync(int? roleId)
        {
            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetRoleAndAccountMappingByRoleIdReturnModel>("EXEC [dbo].[uspGetRoleAndAccountMappingByRoleId] @RoleId", roleIdParam).ToListAsync();

            return procResultData;
        }

        public int UspInsertAnnouncement(int? categoryId, string title, string contentSummary, string contentDesc, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate, string backgroundImagePath, bool? valid, string creatorId, System.DateTime? createdAt, string creatorName, int? creatorDept, System.Data.DataTable attachs, System.Data.DataTable depts)
        {
            var categoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = System.DBNull.Value;

            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 200 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var contentSummaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ContentSummary", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = contentSummary, Size = 200 };
            if (contentSummaryParam.Value == null)
                contentSummaryParam.Value = System.DBNull.Value;

            var contentDescParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ContentDesc", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = contentDesc, Size = -1 };
            if (contentDescParam.Value == null)
                contentDescParam.Value = System.DBNull.Value;

            var effectiveStartdateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EffectiveStartdate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = effectiveStartdate.GetValueOrDefault() };
            if (!effectiveStartdate.HasValue)
                effectiveStartdateParam.Value = System.DBNull.Value;

            var effectiveEnddateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EffectiveEnddate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = effectiveEnddate.GetValueOrDefault() };
            if (!effectiveEnddate.HasValue)
                effectiveEnddateParam.Value = System.DBNull.Value;

            var backgroundImagePathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BackgroundImagePath", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = backgroundImagePath, Size = 100 };
            if (backgroundImagePathParam.Value == null)
                backgroundImagePathParam.Value = System.DBNull.Value;

            var validParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Valid", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = valid.GetValueOrDefault() };
            if (!valid.HasValue)
                validParam.Value = System.DBNull.Value;

            var creatorIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatorId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = creatorId, Size = 50 };
            if (creatorIdParam.Value == null)
                creatorIdParam.Value = System.DBNull.Value;

            var createdAtParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatedAt", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = createdAt.GetValueOrDefault() };
            if (!createdAt.HasValue)
                createdAtParam.Value = System.DBNull.Value;

            var creatorNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatorName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = creatorName, Size = 20 };
            if (creatorNameParam.Value == null)
                creatorNameParam.Value = System.DBNull.Value;

            var creatorDeptParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatorDept", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = creatorDept.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!creatorDept.HasValue)
                creatorDeptParam.Value = System.DBNull.Value;

            var attachsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Attachs", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = attachs, TypeName = "dbo.AnnouncementAttachTableType" };
            if (attachsParam.Value == null)
                attachsParam.Value = System.DBNull.Value;

            var deptsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Depts", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = depts, TypeName = "dbo.DepartmentTable" };
            if (deptsParam.Value == null)
                deptsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspInsertAnnouncement] @CategoryId, @Title, @ContentSummary, @ContentDesc, @EffectiveStartdate, @EffectiveEnddate, @BackgroundImagePath, @Valid, @CreatorId, @CreatedAt, @CreatorName, @CreatorDept, @Attachs, @Depts", categoryIdParam, titleParam, contentSummaryParam, contentDescParam, effectiveStartdateParam, effectiveEnddateParam, backgroundImagePathParam, validParam, creatorIdParam, createdAtParam, creatorNameParam, creatorDeptParam, attachsParam, deptsParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspInsertAnnouncementCategory(string categoryName, int? sort, bool? valid, string creatorId, System.DateTime? createdAt)
        {
            var categoryNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = categoryName, Size = 30 };
            if (categoryNameParam.Value == null)
                categoryNameParam.Value = System.DBNull.Value;

            var sortParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Sort", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sort.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sort.HasValue)
                sortParam.Value = System.DBNull.Value;

            var validParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Valid", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = valid.GetValueOrDefault() };
            if (!valid.HasValue)
                validParam.Value = System.DBNull.Value;

            var creatorIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatorId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = creatorId, Size = 50 };
            if (creatorIdParam.Value == null)
                creatorIdParam.Value = System.DBNull.Value;

            var createdAtParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatedAt", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = createdAt.GetValueOrDefault() };
            if (!createdAt.HasValue)
                createdAtParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspInsertAnnouncementCategory] @CategoryName, @Sort, @Valid, @CreatorId, @CreatedAt", categoryNameParam, sortParam, validParam, creatorIdParam, createdAtParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspInsertAnnouncementLog(int? announcementId, string account)
        {
            var announcementIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AnnouncementId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = announcementId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!announcementId.HasValue)
                announcementIdParam.Value = System.DBNull.Value;

            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspInsertAnnouncementLog] @AnnouncementId, @Account", announcementIdParam, accountParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspInsertApplicationErrorLog(string applicationName, string requestUrl, string requestPath, string message, string stachMessage)
        {
            var applicationNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ApplicationName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = applicationName, Size = 50 };
            if (applicationNameParam.Value == null)
                applicationNameParam.Value = System.DBNull.Value;

            var requestUrlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestUrl", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = requestUrl, Size = 20 };
            if (requestUrlParam.Value == null)
                requestUrlParam.Value = System.DBNull.Value;

            var requestPathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestPath", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = requestPath, Size = 200 };
            if (requestPathParam.Value == null)
                requestPathParam.Value = System.DBNull.Value;

            var messageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Message", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = message, Size = 500 };
            if (messageParam.Value == null)
                messageParam.Value = System.DBNull.Value;

            var stachMessageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StachMessage", SqlDbType = System.Data.SqlDbType.NText, Direction = System.Data.ParameterDirection.Input, Value = stachMessage, Size = 1073741823 };
            if (stachMessageParam.Value == null)
                stachMessageParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspInsertApplicationErrorLog] @ApplicationName, @RequestUrl, @RequestPath, @Message, @StachMessage", applicationNameParam, requestUrlParam, requestPathParam, messageParam, stachMessageParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspInsertBrand(string brandName, string creatorId)
        {
            var brandNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BrandName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = brandName, Size = 50 };
            if (brandNameParam.Value == null)
                brandNameParam.Value = System.DBNull.Value;

            var creatorIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatorId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = creatorId, Size = 50 };
            if (creatorIdParam.Value == null)
                creatorIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspInsertBrand] @BrandName, @CreatorId", brandNameParam, creatorIdParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspInsertBrandAndDeptMapping(int? brandId, int? deptId, string creatorId)
        {
            var brandIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BrandId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = brandId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!brandId.HasValue)
                brandIdParam.Value = System.DBNull.Value;

            var deptIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DeptId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = deptId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!deptId.HasValue)
                deptIdParam.Value = System.DBNull.Value;

            var creatorIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatorId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = creatorId, Size = 50 };
            if (creatorIdParam.Value == null)
                creatorIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspInsertBrandAndDeptMapping] @BrandId, @DeptId, @CreatorId", brandIdParam, deptIdParam, creatorIdParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspInsertRoleAndAccountMapping(int? roleId, string account, string reasons, string creatorId)
        {
            var roleIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RoleId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = roleId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!roleId.HasValue)
                roleIdParam.Value = System.DBNull.Value;

            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = account, Size = 50 };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var reasonsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Reasons", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = reasons, Size = 200 };
            if (reasonsParam.Value == null)
                reasonsParam.Value = System.DBNull.Value;

            var creatorIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CreatorId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = creatorId, Size = 50 };
            if (creatorIdParam.Value == null)
                creatorIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspInsertRoleAndAccountMapping] @RoleId, @Account, @Reasons, @CreatorId", roleIdParam, accountParam, reasonsParam, creatorIdParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspRaiseError()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspRaiseError] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspSyncAccount(string modifierId, System.Data.DataTable account)
        {
            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var accountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Account", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = account, TypeName = "dbo.AccountTable" };
            if (accountParam.Value == null)
                accountParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspSyncAccount] @ModifierId, @Account", modifierIdParam, accountParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspSyncDepartment(string modifierId, System.Data.DataTable dept)
        {
            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var deptParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Dept", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = dept, TypeName = "dbo.DepartmentTable" };
            if (deptParam.Value == null)
                deptParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspSyncDepartment] @ModifierId, @Dept", modifierIdParam, deptParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateAnnouncement(int? id, int? categoryId, string title, string contentSummary, string contentDesc, System.DateTime? effectiveStartdate, System.DateTime? effectiveEnddate, string backgroundImagePath, string modifierId, System.DateTime? modifiedAt, System.Data.DataTable attachs, System.Data.DataTable depts)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var categoryIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = categoryId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!categoryId.HasValue)
                categoryIdParam.Value = System.DBNull.Value;

            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 200 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var contentSummaryParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ContentSummary", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = contentSummary, Size = 200 };
            if (contentSummaryParam.Value == null)
                contentSummaryParam.Value = System.DBNull.Value;

            var contentDescParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ContentDesc", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = contentDesc, Size = -1 };
            if (contentDescParam.Value == null)
                contentDescParam.Value = System.DBNull.Value;

            var effectiveStartdateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EffectiveStartdate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = effectiveStartdate.GetValueOrDefault() };
            if (!effectiveStartdate.HasValue)
                effectiveStartdateParam.Value = System.DBNull.Value;

            var effectiveEnddateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@EffectiveEnddate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = effectiveEnddate.GetValueOrDefault() };
            if (!effectiveEnddate.HasValue)
                effectiveEnddateParam.Value = System.DBNull.Value;

            var backgroundImagePathParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BackgroundImagePath", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = backgroundImagePath, Size = 100 };
            if (backgroundImagePathParam.Value == null)
                backgroundImagePathParam.Value = System.DBNull.Value;

            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var modifiedAtParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifiedAt", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = modifiedAt.GetValueOrDefault() };
            if (!modifiedAt.HasValue)
                modifiedAtParam.Value = System.DBNull.Value;

            var attachsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Attachs", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = attachs, TypeName = "dbo.AnnouncementAttachTableType" };
            if (attachsParam.Value == null)
                attachsParam.Value = System.DBNull.Value;

            var deptsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Depts", SqlDbType = System.Data.SqlDbType.Structured, Direction = System.Data.ParameterDirection.Input, Value = depts, TypeName = "dbo.DepartmentTable" };
            if (deptsParam.Value == null)
                deptsParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspUpdateAnnouncement] @Id, @CategoryId, @Title, @ContentSummary, @ContentDesc, @EffectiveStartdate, @EffectiveEnddate, @BackgroundImagePath, @ModifierId, @ModifiedAt, @Attachs, @Depts", idParam, categoryIdParam, titleParam, contentSummaryParam, contentDescParam, effectiveStartdateParam, effectiveEnddateParam, backgroundImagePathParam, modifierIdParam, modifiedAtParam, attachsParam, deptsParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateAnnouncementAttachValid(int? id, string modifierId, System.DateTime? modifiedAt)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var modifiedAtParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifiedAt", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = modifiedAt.GetValueOrDefault() };
            if (!modifiedAt.HasValue)
                modifiedAtParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspUpdateAnnouncementAttachValid] @Id, @ModifierId, @ModifiedAt", idParam, modifierIdParam, modifiedAtParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateAnnouncementCategory(int? id, string categoryName, int? sort, bool? valid, string modifierId, System.DateTime? modifiedAt)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var categoryNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CategoryName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = categoryName, Size = 30 };
            if (categoryNameParam.Value == null)
                categoryNameParam.Value = System.DBNull.Value;

            var sortParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Sort", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = sort.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!sort.HasValue)
                sortParam.Value = System.DBNull.Value;

            var validParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Valid", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = valid.GetValueOrDefault() };
            if (!valid.HasValue)
                validParam.Value = System.DBNull.Value;

            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var modifiedAtParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifiedAt", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = modifiedAt.GetValueOrDefault() };
            if (!modifiedAt.HasValue)
                modifiedAtParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspUpdateAnnouncementCategory] @Id, @CategoryName, @Sort, @Valid, @ModifierId, @ModifiedAt", idParam, categoryNameParam, sortParam, validParam, modifierIdParam, modifiedAtParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateAnnouncementCategoryValid(int? id, string modifierId, System.DateTime? modifiedAt)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var modifiedAtParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifiedAt", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = modifiedAt.GetValueOrDefault() };
            if (!modifiedAt.HasValue)
                modifiedAtParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspUpdateAnnouncementCategoryValid] @Id, @ModifierId, @ModifiedAt", idParam, modifierIdParam, modifiedAtParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateAnnouncementValid(int? id, string modifierId, System.DateTime? modifiedAt)
        {
            var idParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = id.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!id.HasValue)
                idParam.Value = System.DBNull.Value;

            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var modifiedAtParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifiedAt", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = modifiedAt.GetValueOrDefault() };
            if (!modifiedAt.HasValue)
                modifiedAtParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspUpdateAnnouncementValid] @Id, @ModifierId, @ModifiedAt", idParam, modifierIdParam, modifiedAtParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateBrand(int? brandId, string brandName, string modifierId, string requestUrl)
        {
            var brandIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BrandId", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = brandId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!brandId.HasValue)
                brandIdParam.Value = System.DBNull.Value;

            var brandNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BrandName", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = brandName, Size = 50 };
            if (brandNameParam.Value == null)
                brandNameParam.Value = System.DBNull.Value;

            var modifierIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ModifierId", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = modifierId, Size = 50 };
            if (modifierIdParam.Value == null)
                modifierIdParam.Value = System.DBNull.Value;

            var requestUrlParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RequestUrl", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = requestUrl, Size = 200 };
            if (requestUrlParam.Value == null)
                requestUrlParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspUpdateBrand] @BrandId, @BrandName, @ModifierId, @RequestUrl", brandIdParam, brandNameParam, modifierIdParam, requestUrlParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspUpdateLanguageIsNeedUpdate()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspUpdateLanguageIsNeedUpdate] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

    }
}
// </auto-generated>
